name: Chocolatine
on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run coding style check
        run: check.sh $(pwd) $(pwd)
      - name: Display errors
        run: |
          if [ -sf coding-style-reports.log ]; then
            while IFS= read -r line; do
              echo "::error file=$(echo $line | cut -d: -f1),line=$(echo $line | cut -d: -f2)::$(echo $line | cut -d: -f3-)"
            done < coding-style-reports.log
            exit 1
          fi

  check_banned_functions:
    runs-on: ubuntu-latest
    needs: check_coding_style
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Scan for banned functions
        run: |
          BANNED_FUNCTIONS="printf,gets,strcpy,strcat,scanf"
          grep -rnE "\b($BANNED_FUNCTIONS)\b" --include=\*.c || true
          if grep -rnE "\b($BANNED_FUNCTIONS)\b" --include=\*.c; then
            echo "::error::Banned function usage detected"
            exit 1
          fi

  check_program_compilation:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    needs: check_banned_functions
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Compile project
        run: timeout 10 make
      - name: Clean project
        run: make clean
      - name: Verify executables
        run: |
          for file in ${{ env.EXECUTABLES }}; do
            if [ ! -x "$file" ]; then
              echo "::error file=$file::Executable missing or not executable"
              exit 1
            fi
          done

  run_tests:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    needs: check_program_compilation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run tests
        run: timeout 10 make tests_run