name: Chocolatine Workflow

on:
  push:
    branches-ignore:
      - 'ga-ignore**'
  pull_request:
    branches-ignore:
      - 'ga-ignore**'

env:
  MIRROR_URL: ${{ secrets.MIRROR_URL }}
  EXECUTABLES: ${{ secrets.EXECUTABLES }}

jobs:
  check_coding_style:
    name: Check coding style
    runs-on: ubuntu-latest
    if: github.repository != env.MIRROR_URL
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run coding style checker
        run: |
          check.sh $(pwd) $(pwd)
          if [ -f coding-style-reports.log ]; then
            while IFS= read -r line; do
              echo "::error file=${line%:},line=${line#:}::${line#::}"
            done < coding-style-reports.log
            exit 1
          fi

  check_program_compilation:
    name: Check program compilation
    needs: check_coding_style
    runs-on: ubuntu-latest
    if: github.repository != env.MIRROR_URL
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Make
        run: make
        timeout-minutes: 2
      
      - name: Verify executables
        run: |
          IFS=',' read -ra EXEC_ARRAY <<< "$EXECUTABLES"
          for exec in "${EXEC_ARRAY[@]}"; do
            if [ ! -f "$exec" ]; then
              echo "::error file=$exec::Executable $exec was not generated by make"
              exit 1
            fi
            if [ ! -x "$exec" ]; then
              echo "::error file=$exec::File $exec exists but is not executable"
              exit 1
            fi
          done
      
      - name: Make clean
        run: make clean

  run_tests:
    name: Run tests
    needs: check_program_compilation
    runs-on: ubuntu-latest
    if: github.repository != env.MIRROR_URL
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: Push to mirror repository
    needs: run_tests
    if: github.event_name == 'push' && github.repository != env.MIRROR_URL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}